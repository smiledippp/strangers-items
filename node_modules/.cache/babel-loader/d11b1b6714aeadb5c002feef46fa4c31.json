{"ast":null,"code":"const url = \"https://strangers-things.herokuapp.com/2206-FTB-ET-WEB-FT-B\";\nexport const fetchAllPosts = async () => {\n  const response = await fetch(`${url}/allposts`);\n  const result = await response.json();\n  return result;\n};\nexport const fetchPostById = async id => {\n  const response = await fetch(`${url}/posts/${id}`);\n  const result = await response.json();\n  return result;\n};\nexport const newPost = async (token, postObj) => {\n  const response = await fetch(`${url}/addposts`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      post: postObj\n    })\n  });\n  const result = await response.json();\n  return result;\n};\nexport const deletePost = async (id, token) => {\n  const response = await fetch(`${url}/posts/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const result = await response.json();\n  return result;\n};\nexport const editPost = async (token, postObj, postId) => {\n  const response = await fetch(`${url}/posts/${postId}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      post: postObj\n    })\n  });\n  const result = await response.json();\n  return result;\n};\nexport const sendMessage = async (postId, token, content) => {\n  const response = await fetch(`${url}/posts/${postId}/messages`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      message: {\n        content: content\n      }\n    })\n  });\n  const result = await response.json();\n  return result;\n};","map":{"version":3,"names":["url","fetchAllPosts","response","fetch","result","json","fetchPostById","id","newPost","token","postObj","method","headers","Authorization","body","JSON","stringify","post","deletePost","editPost","postId","sendMessage","content","message"],"sources":["/home/menou/course-work/strangers-things/strangers-items/src/api/post.js"],"sourcesContent":["const url=\"https://strangers-things.herokuapp.com/2206-FTB-ET-WEB-FT-B\"\n\nexport const fetchAllPosts = async () => {\n    const response = await fetch(`${url}/allposts`);\n    const result = await response.json();\n    return result;\n  };\n  \n  export const fetchPostById = async (id) => {\n    const response = await fetch(`${url}/posts/${id}`);\n    const result = await response.json();\n    return result;\n  };\n  export const newPost = async (token, postObj) => {\n    const response = await fetch(`${url}/addposts`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({ post: postObj }),\n    });\n    const result = await response.json();\n    return result;\n  };\n  export const deletePost = async (id, token) => {\n    const response = await fetch(`${url}/posts/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const result = await response.json();\n    return result;\n  };\n  export const editPost = async (token, postObj, postId) => {\n    const response = await fetch(`${url}/posts/${postId}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({ post: postObj }),\n    });\n    const result = await response.json();\n    return result;\n  };\n  export const sendMessage = async (postId, token, content) => {\n    const response = await fetch(`${url}/posts/${postId}/messages`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({ message: { content: content } }),\n    });\n  \n    const result = await response.json();\n    return result;\n  };"],"mappings":"AAAA,MAAMA,GAAG,GAAC,6DAAV;AAEA,OAAO,MAAMC,aAAa,GAAG,YAAY;EACrC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,GAAI,WAAR,CAA5B;EACA,MAAMI,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;EACA,OAAOD,MAAP;AACD,CAJI;AAML,OAAO,MAAME,aAAa,GAAG,MAAOC,EAAP,IAAc;EACzC,MAAML,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,GAAI,UAASO,EAAG,EAApB,CAA5B;EACA,MAAMH,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;EACA,OAAOD,MAAP;AACD,CAJM;AAKP,OAAO,MAAMI,OAAO,GAAG,OAAOC,KAAP,EAAcC,OAAd,KAA0B;EAC/C,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,GAAI,WAAR,EAAoB;IAC9CW,MAAM,EAAE,MADsC;IAE9CC,OAAO,EAAE;MACP,gBAAgB,kBADT;MAEPC,aAAa,EAAG,UAASJ,KAAM;IAFxB,CAFqC;IAM9CK,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MAAEC,IAAI,EAAEP;IAAR,CAAf;EANwC,CAApB,CAA5B;EAQA,MAAMN,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;EACA,OAAOD,MAAP;AACD,CAXM;AAYP,OAAO,MAAMc,UAAU,GAAG,OAAOX,EAAP,EAAWE,KAAX,KAAqB;EAC7C,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,GAAI,UAASO,EAAG,EAApB,EAAuB;IACjDI,MAAM,EAAE,QADyC;IAEjDC,OAAO,EAAE;MACP,gBAAgB,kBADT;MAEPC,aAAa,EAAG,UAASJ,KAAM;IAFxB;EAFwC,CAAvB,CAA5B;EAOA,MAAML,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;EACA,OAAOD,MAAP;AACD,CAVM;AAWP,OAAO,MAAMe,QAAQ,GAAG,OAAOV,KAAP,EAAcC,OAAd,EAAuBU,MAAvB,KAAkC;EACxD,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,GAAI,UAASoB,MAAO,EAAxB,EAA2B;IACrDT,MAAM,EAAE,OAD6C;IAErDC,OAAO,EAAE;MACP,gBAAgB,kBADT;MAEPC,aAAa,EAAG,UAASJ,KAAM;IAFxB,CAF4C;IAMrDK,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MAAEC,IAAI,EAAEP;IAAR,CAAf;EAN+C,CAA3B,CAA5B;EAQA,MAAMN,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;EACA,OAAOD,MAAP;AACD,CAXM;AAYP,OAAO,MAAMiB,WAAW,GAAG,OAAOD,MAAP,EAAeX,KAAf,EAAsBa,OAAtB,KAAkC;EAC3D,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,GAAI,UAASoB,MAAO,WAAxB,EAAoC;IAC9DT,MAAM,EAAE,MADsD;IAE9DC,OAAO,EAAE;MACP,gBAAgB,kBADT;MAEPC,aAAa,EAAG,UAASJ,KAAM;IAFxB,CAFqD;IAM9DK,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MAAEO,OAAO,EAAE;QAAED,OAAO,EAAEA;MAAX;IAAX,CAAf;EANwD,CAApC,CAA5B;EASA,MAAMlB,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;EACA,OAAOD,MAAP;AACD,CAZM"},"metadata":{},"sourceType":"module"}